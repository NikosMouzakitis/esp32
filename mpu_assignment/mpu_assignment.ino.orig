#include "mpu9250.h"
#include <WiFi.h>
#include <Arduino.h>
#include <PubSubClient.h>
#include <driver/ledc.h>

// WiFi credentials
const char* ssid = "Test_net";
const char* password = "123456789";

// MQTT server
const char* mqtt_server = "192.168.252.247";
int mqtt_port = 1883;

// LED pins
const int led1Pin = 15;
const int led2Pin = 18;

// PWM settings
const int freq = 5000;
ledc_channel_t pwmChannel1 = LEDC_CHANNEL_0;
ledc_channel_t pwmChannel2 = LEDC_CHANNEL_1;
const int resolution = 8;

WiFiClient espClient;
PubSubClient client(espClient);
bfs::Mpu9250 imu;

// LED toggle states
bool led1State = false;
bool led2State = false;

// Edge detection flags
bool prevButton1State = false;
bool prevButton2State = false;

void setup() {
  Serial.begin(115200);
  Serial.println("operating");

  // LEDC timer config
  ledc_timer_config_t timer_conf = {
    .speed_mode = LEDC_LOW_SPEED_MODE,
    .duty_resolution = LEDC_TIMER_8_BIT,
    .timer_num = LEDC_TIMER_0,
    .freq_hz = freq,
    .clk_cfg = LEDC_AUTO_CLK
  };
  ledc_timer_config(&timer_conf);

  // LED1 config
  ledc_channel_config_t channel_conf1 = {
    .gpio_num = led1Pin,
    .speed_mode = LEDC_LOW_SPEED_MODE,
    .channel = LEDC_CHANNEL_0,
    .intr_type = LEDC_INTR_DISABLE,
    .timer_sel = LEDC_TIMER_0,
    .duty = 0,
    .hpoint = 0
  };
  ledc_channel_config(&channel_conf1);

  // LED2 config
  ledc_channel_config_t channel_conf2 = {
    .gpio_num = led2Pin,
    .speed_mode = LEDC_LOW_SPEED_MODE,
    .channel = LEDC_CHANNEL_1,
    .intr_type = LEDC_INTR_DISABLE,
    .timer_sel = LEDC_TIMER_0,
    .duty = 0,
    .hpoint = 0
  };
  ledc_channel_config(&channel_conf2);

  // WiFi connect
  WiFi.begin(ssid, password);
  Serial.print("Connecting to wifi.");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected - IP address: ");
  Serial.println(WiFi.localIP());
  delay(500);

  client.setServer(mqtt_server, 1883);

  Serial.println("connecting to MPU...");
  delay(1000);
  Wire.begin();
  Wire.setClock(400000);
  imu.Config(&Wire, bfs::Mpu9250::I2C_ADDR_PRIM);

  if (!imu.Begin()) {
    Serial.println("IMU init failed");
    while (1) {}
  }
  if (!imu.ConfigSrd(19)) {
    Serial.println("SRD config failed");
    while (1) {}
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if (imu.Read()) {
    Serial.print("AccX: ");
    float ax=imu.accel_x_mps2();
		Serial.print(ax);
		Serial.println(" ");
		Serial.print("AccY: ");
		float ay=imu.accel_y_mps2();
		Serial.print(ay);
		Serial.println(" ");
		Serial.print("AccZ: ");
		float az = imu.accel_z_mps2();
		Serial.print(az);
		Serial.println(" ");
		String accData = "ax:" + String(ax) + " ay:" + String(ay) + " az:" + String(az);
		Serial.println(accData);
		Serial.print("GyroX: ");
		float gx = imu.gyro_x_radps();
		Serial.print(gx);
		Serial.println(" ");
		Serial.print("GyroY: ");
		float gy = imu.gyro_y_radps();
		Serial.print(gy);
		Serial.println(" ");
		Serial.print("GyroZ: ");
		float gz=imu.gyro_z_radps();
		Serial.print(gz);
		Serial.println(" ");
		String gyroData = "gx:" + String(gx) + " gy:" + String(gy) + " gz:" + String(gz);
		Serial.println(gyroData);
		/*
		Serial.print(imu.mag_x_ut());
		Serial.println(" ");
		Serial.print(imu.mag_y_ut());
		Serial.println(" ");
		Serial.print(imu.mag_z_ut());
		Serial.println(" ");
		*/

    // Publish data
    String accData = "ay:" + String(ay);
    String gyroData = "gy:" + String(gy);
    client.publish("esp32/acc", accData.c_str());
    client.publish("esp32/gyro", gyroData.c_str());

    // Button logic for LED 1 (ay > 0.5)
    bool button1Pressed = (ay > 0.5);
    if (button1Pressed && !prevButton1State) {
      led1State = !led1State;
      Serial.println(led1State ? "LED1 toggled ON" : "LED1 toggled OFF");
    }
    prevButton1State = button1Pressed;

    // Button logic for LED 2 (ay < -10)
    bool button2Pressed = (ay < -10);
    if (button2Pressed && !prevButton2State) {
      led2State = !led2State;
      Serial.println(led2State ? "LED2 toggled ON" : "LED2 toggled OFF");
    }
    prevButton2State = button2Pressed;

    // PWM brightness based on gyroY
    int pwmValue = map(constrain((int)(gy * 100), -300, 300), -300, 300, 0, 255);

    // LED1 control
    ledc_set_duty(LEDC_LOW_SPEED_MODE, pwmChannel1, led1State ? pwmValue : 0);
    ledc_update_duty(LEDC_LOW_SPEED_MODE, pwmChannel1);

    // LED2 control
    ledc_set_duty(LEDC_LOW_SPEED_MODE, pwmChannel2, led2State ? pwmValue : 0);
    ledc_update_duty(LEDC_LOW_SPEED_MODE, pwmChannel2);

    Serial.printf("ay=%.2f, gy=%.2f, LED1=%s, LED2=%s, PWM=%d\n", ay, gy,
                  led1State ? "ON" : "OFF", led2State ? "ON" : "OFF", pwmValue);
  }

  delay(200);
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (client.connect("ESP32 client")) {
      Serial.println("Connected");
    } else {
      Serial.print(client.state());
      Serial.println(" Failed - retrying in 5 seconds");
      delay(5000);
    }
  }
}

