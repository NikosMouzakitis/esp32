#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class LEDSVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[16] = { 0 };
                        float decisions[3] = { 0 };
                        int votes[3] = { 0 };
                        kernels[0] = compute_kernel(x,   1.353575728771  , -0.144515561867  , 1.53195840059  , -2.141846042851  , 0.368165793052  , -1.156883997725  , 0.431961285125  , -0.16960781083  , 0.168475492802  , 4.060236155541  , -0.147300445703  , -3.5511496625  , -0.078839469725  , 0.297007451104  , -0.157082105562  , 1.465361731682  , 0.057942668027  , -0.482741899368  , 0.040944475632  , -1.590885010362 );
                        kernels[1] = compute_kernel(x,   1.387531908331  , 0.943410578031  , 1.287206159476  , -0.14090084801  , 1.536995033475  , -0.472760186184  , 1.363636687084  , 1.471818891756  , 0.89707519144  , 2.14404111618  , 0.958794243241  , 4.572307266512  , 0.6582178984  , 0.904982750544  , 0.188344954784  , 0.95133431795  , 0.350768357189  , 0.513115218337  , 0.328743926001  , 1.32266451113 );
                        kernels[2] = compute_kernel(x,   1.393437330863  , 0.889014271036  , 1.343471042491  , 1.86004434683  , 1.388415045286  , 1.10072458036  , 1.407530209061  , 0.651105540463  , 2.097361635279  , -1.75222213052  , 1.57820726905  , -0.301766890895  , 0.700129003646  , 0.834831754455  , 0.229502221548  , 2.612038270005  , 0.094915608578  , 1.032692844966  , 0.077684830998  , 1.20612253027 );
                        kernels[3] = compute_kernel(x,   0.506147595394  , -0.470893403837  , 0.642973248958  , 0.731306031792  , 0.661080626911  , 0.553425531127  , 0.984170109995  , -0.295871403336  , 0.739393167108  , -0.666378274882  , 0.968472571769  , -0.590600915038  , 1.36637105601  , 0.03978713211  , 1.37308627665  , -0.037179939225  , 1.529465701945  , -0.136356814949  , 1.440139675832  , -0.542007182625 );
                        kernels[4] = compute_kernel(x,   1.468731468149  , -0.416497096842  , 1.191555858351  , 1.86004434683  , 1.422376185444  , 1.374374104976  , 1.481158052377  , 0.335446559197  , 0.634724926819  , -1.368983122648  , 0.708540319867  , 3.200345651835  , 1.263761108682  , 4.833438531539  , 0.226562416779  , -0.669829063817  , 0.068295091381  , -0.872425119339  , 0.354768344386  , 0.157244702533 );
                        kernels[5] = compute_kernel(x,   -0.626217175163  , 0.453843815077  , -0.554062137179  , -0.448738570293  , -0.799248399866  , -0.06228589926  , -0.754579728312  , 2.355664039302  , -0.76130471964  , 0.738831420649  , -0.903592689268  , -0.590600915038  , -0.940184943062  , 0.484076774009  , -1.047842950539  , 0.318685193358  , -1.20209514594  , -1.78168596594  , -1.473064335087  , 1.38093550156 );
                        kernels[6] = compute_kernel(x,   -0.472676189325  , -4.115445972496  , -0.862112371685  , -2.603602626275  , -1.068107426113  , -2.730368764269  , -1.180771667506  , 1.408687095503  , -1.300957854639  , 0.22784607682  , -1.312847724178  , -1.782041264627  , -1.482138890213  , -0.451269840514  , -1.249219577208  , 0.239604052784  , -1.153290864413  , -0.266251221606  , -1.330695458043  , -2.173594914661 );
                        kernels[7] = compute_kernel(x,   -1.433783706447  , -1.123649087776  , -1.49790554975  , 2.013963207972  , -1.141689896455  , -0.746409710801  , -1.194930868143  , 0.335446559197  , -1.402907439337  , -0.921870946797  , -1.3156129609  , 2.478260591478  , -1.223446206106  , 0.600995100824  , -1.275677820128  , -1.935127313002  , -1.218363239783  , 0.643009624995  , -1.171487251456  , -2.46494986681 );
                        kernels[8] = compute_kernel(x,   -0.617359041365  , 0.073069666113  , -0.794594512067  , 1.090450041122  , -0.874245917714  , -0.883234473109  , -0.797057330225  , -3.831251993521  , -1.150072469287  , -2.7103196502  , -1.16352494117  , 0.095379892301  , -1.362186416577  , -1.082628805317  , -1.443246691956  , 0.358225763645  , -1.332239896679  , 1.205885387176  , -1.416422953898  , 1.08958054941 );
                        kernels[9] = compute_kernel(x,   -0.189215907777  , -0.253308175857  , 0.084544285037  , 0.166936874273  , -0.114365406687  , -1.088471616571  , -0.008389854706  , 0.082919374183  , -0.006877792878  , -0.857997778818  , 0.029674704528  , 0.131484145319  , 0.16684631965  , -0.19404952152  , 0.185405150015  , 0.081441771636  , 0.164424736813  , -1.78168596594  , 0.180251656396  , 0.273786683393 );
                        kernels[10] = compute_kernel(x,   0.038142859714  , -0.253308175857  , -0.054711300424  , 0.064324300179  , -0.015312081228  , 0.348188387665  , 0.056742468227  , -0.611530384603  , 0.024386746429  , 1.1859435965  , 0.05594445339  , -0.590600915038  , 0.150949003867  , 0.180089124289  , 0.081042080719  , -0.709369634105  , 0.186608501144  , 0.036835727261  , 0.184844200817  , -0.308923220906 );
                        kernels[11] = compute_kernel(x,   -0.109492703592  , 0.399447508082  , -0.074404009479  , 0.320855735415  , -0.066253791464  , -0.199110661568  , -0.10750425917  , -0.043344218323  , -0.019111743042  , -1.177363618712  , -0.054665015504  , -0.626705168056  , 0.137942109135  , -0.19404952152  , 0.089861495025  , -0.195342220373  , 0.123015043396  , -0.136356814949  , 0.109832641944  , -0.192381240046 );
                        kernels[12] = compute_kernel(x,   -0.010576876177  , 0.997806885026  , -0.118009293815  , -0.448738570293  , -0.028047508787  , 0.895487436898  , -0.087681378277  , -0.106476014576  , -0.145529228067  , 0.547211916713  , 0.149962501951  , 0.709152193604  , 0.091695372312  , -0.170665856157  , 0.058993544952  , 0.516388044793  , 0.049069162295  , -0.222953086053  , 0.31955883716  , 1.788832434569 );
                        kernels[13] = compute_kernel(x,   -0.13754346062  , -0.144515561867  , -0.050491434198  , 0.166936874273  , -0.169552259443  , 0.485013149973  , -0.035292335918  , 0.651105540463  , 0.001278173898  , 0.163972908841  , -0.017334319752  , -0.482288155985  , 0.012208793397  , -0.591571832692  , 0.060463447336  , -0.669829063817  , 0.08160534998  , -0.222953086053  , 0.099116704962  , 0.798225597261 );
                        kernels[14] = compute_kernel(x,   0.039619215347  , 0.562636429067  , -0.054711300424  , -0.500044857341  , -0.008236843695  , -1.362121141187  , -0.226441544526  , 0.146051170437  , 0.092353136228  , 0.483338748734  , -0.029777885003  , -0.085141372788  , 0.100366635466  , 0.016403466747  , 0.031065399647  , -0.155801650086  , 0.07421076187  , -0.612636306025  , 0.157288934292  , 0.157244702533 );
                        kernels[15] = compute_kernel(x,   0.049953704778  , 0.236258587097  , 0.07469793051  , 0.013018013131  , 0.079496101712  , 0.211363625357  , 0.062406148482  , -0.106476014576  , 0.093712464023  , 0.163972908841  , 0.119544898005  , -0.085141372788  , 0.159620267021  , -0.240816852246  , 0.208923588166  , 0.041901201349  , 0.210271183096  , -0.266251221606  , 0.207806922921  , -0.134110249616 );
                        decisions[0] = 0.067416208734
                        + kernels[0] * 0.028277001236
                        + kernels[1] * 0.005882591688
                        + kernels[2] * 0.00660719936
                        + kernels[3] * 0.005946622897
                        + kernels[4] * 0.010415964508
                        + kernels[5] * -0.041158292759
                        + kernels[6] * -0.007641824695
                        + kernels[8] * -0.008329262235
                        ;
                        decisions[1] = -1.235835328116
                        + kernels[0] * 0.071416745366
                        + kernels[1] * 0.042935912771
                        + kernels[3] * 0.17959283481
                        + kernels[4] * 0.010344602008
                        + kernels[10] * -0.072735748602
                        + kernels[15] * -0.231554346354
                        ;
                        decisions[2] = -0.980154457856
                        + kernels[5] * 0.113152431128
                        + kernels[6] * 0.001640735378
                        + kernels[7] * 0.011957066446
                        + kernels[8] * 0.045717223452
                        + kernels[9] * -0.042531477031
                        + kernels[11] * -0.01242270158
                        + kernels[12] * -0.022831419185
                        + kernels[13] * -0.06822057289
                        + kernels[14] * -0.026461285719
                        ;
                        votes[decisions[0] > 0 ? 0 : 1] += 1;
                        votes[decisions[1] > 0 ? 0 : 2] += 1;
                        votes[decisions[2] > 0 ? 1 : 2] += 1;
                        int val = votes[0];
                        int idx = 0;

                        for (int i = 1; i < 3; i++) {
                            if (votes[i] > val) {
                                val = votes[i];
                                idx = i;
                            }
                        }

                        return idx;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "LED1_TOGGLE";
                            case 1:
                            return "LED2_TOGGLE";
                            case 2:
                            return "NEUTRAL";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 20);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 20; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }
